/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package podcaster;

import java.awt.Color;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLConnection;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.concurrent.ExecutionException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JList;
import javax.swing.JMenuItem;
import javax.swing.JScrollPane;
import javax.swing.SwingWorker;
import static sun.audio.AudioPlayer.player;

/**
 *
 * @author Dave
 */
public class SimpleRSS extends javax.swing.JFrame implements ActionListener{

    /**
     * Creates new form SimpleRSS
     */
    
    private JMenuItem[] menuItems;
    private URL url;
    private SimpleRSSParser parser;
    private Player play = new Player();
    private JList listOut;
    private boolean modern = false;
    private boolean acast = false;
    private boolean imgClicked = false;
    private XMLParser xmlParser;
    private String charset = null;
    private boolean xml = false;
    private boolean xmlSR = false;
    private int playindex = 0;
    
    
    private String[][] rssFeeds = new String[][] {
        {"JOE ROGAN", "http://joeroganexp.joerogan.libsynpro.com/rss"},
	{"Alex o Sigge", "http://alexosigge.libsyn.com/rss"},
	{"Tyngre Radio", "http://tyngreradio.libsyn.com/rss"},
	{"Börspodden", "http://borspodden.libsyn.com/rss"},
	{"Filip o Fredrik", "http://rss.acast.com/filipandfredrik"},
	{"Allt du velat veta", "http://rss.acast.com/alltduvelatveta"},
	{"WTF", "https://wtfpod.libsyn.com/rss"},
	{"Spår Podcast", "http://rss.acast.com/sparpodcast"},
	{"Historiepodden", "http://static.radioplay.se/data/rss/304.xml"},
        {"Gry o Anders", "https://cdn.radioplay.se/data/rss/434.xml"},
        {"Businesspodden", "https://cdn.radioplay.se/data/rss/316.xml"},
        {"Fördomspodden", "http://rss.acast.com/fordomspodden"},
        {"P3 Dokumentär", "http://api.sr.se/api/rss/pod/3966"},
        {"Spanarna", "http://api.sr.se/api/rss/pod/4007"},
        {"P3 Spel", "http://api.sr.se/api/rss/pod/14424"}
    };
    
    public SimpleRSS() {
        initComponents();
        initGUI();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        imagelbl = new javax.swing.JLabel();
        progressBar = new javax.swing.JProgressBar();
        lblDownloaded = new javax.swing.JLabel();
        btnUpdate = new javax.swing.JButton();
        btnPlay = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        btnPause = new javax.swing.JButton();
        btnStop = new javax.swing.JButton();
        btnForward = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        textOutContent = new javax.swing.JEditorPane();
        lblPlaying = new javax.swing.JLabel();
        menu = new javax.swing.JMenuBar();
        rss = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        progressBar.setBackground(new java.awt.Color(51, 255, 51));

        lblDownloaded.setForeground(new java.awt.Color(0, 153, 0));
        lblDownloaded.setText("Downloaded");
        lblDownloaded.setToolTipText("The media is downloaded");
        lblDownloaded.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(imagelbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblDownloaded))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(0, 94, Short.MAX_VALUE)
                        .addComponent(lblDownloaded)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(imagelbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        btnUpdate.setText("Update");

        btnPlay.setText("Play");
        btnPlay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPlayActionPerformed(evt);
            }
        });

        jList1.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jList1.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jList1ValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(jList1);

        btnPause.setText("Pause");
        btnPause.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPauseActionPerformed(evt);
            }
        });

        btnStop.setText("Stop");
        btnStop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStopActionPerformed(evt);
            }
        });

        btnForward.setText(">>");
        btnForward.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnForwardActionPerformed(evt);
            }
        });

        btnBack.setText("<<");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        jScrollPane2.setViewportView(textOutContent);

        lblPlaying.setForeground(new java.awt.Color(0, 204, 153));
        lblPlaying.setText("Now Playing :");

        rss.setText("Podcasts");
        menu.add(rss);

        setJMenuBar(menu);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(btnPlay)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnPause)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnBack)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnStop)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnForward)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 36, Short.MAX_VALUE)
                        .addComponent(btnUpdate)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(177, 177, 177)
                .addComponent(lblPlaying)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 149, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(13, 13, 13)
                .addComponent(lblPlaying)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnUpdate)
                    .addComponent(btnPlay)
                    .addComponent(btnPause)
                    .addComponent(btnStop)
                    .addComponent(btnForward)
                    .addComponent(btnBack))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnPlayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPlayActionPerformed
        
        try {
            btnPlay.setEnabled(false);
            download(jList1.getSelectedIndex());            
        } catch (IOException ex) {
            Logger.getLogger(SimpleRSS.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnPlayActionPerformed

    private void btnPauseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPauseActionPerformed
        play.Pause();
        btnPlay.setText("Play");
        btnPlay.setEnabled(true);
        lblPlaying.setText("Paused");
    }//GEN-LAST:event_btnPauseActionPerformed

    private void btnStopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStopActionPerformed
        play.Stop();
        btnPlay.setEnabled(true);
        lblPlaying.setText("");
    }//GEN-LAST:event_btnStopActionPerformed

    private void btnForwardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnForwardActionPerformed
        play.Forward();
    }//GEN-LAST:event_btnForwardActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        play.Reverse();
                
    }//GEN-LAST:event_btnBackActionPerformed

    private void jList1ValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jList1ValueChanged
        int index = jList1.getSelectedIndex();
        if (index != -1) {
        ArrayList<Song> currList = play.getSongList();
        
        progressBar.setVisible(true);
        
        if (currList.get(index).getMP3().isEmpty()) {
            btnPlay.setText("Archived");
            btnPlay.setEnabled(false);
        } else if (!currList.get(index).getMP3().isEmpty()) {
            btnPlay.setText("Play");
            btnPlay.setEnabled(true);
        }
        
        if (currList.get(index).getDownloaded()) {
            progressBar.setValue(100);
            progressBar.setStringPainted(true);
            lblDownloaded.setVisible(true);
        } else {
            progressBar.setValue(0);
            lblDownloaded.setVisible(false);
            }
        
        textOutContent.setText(currList.get(index).getDescription()); 
            try {
                if (!currList.get(index).getImage().isEmpty()) {
                setImage(currList.get(index).getImage(),200,200);
                }
            } catch (IOException ex) {
                Logger.getLogger(SimpleRSS.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jList1ValueChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SimpleRSS.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SimpleRSS.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SimpleRSS.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SimpleRSS.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SimpleRSS().setVisible(true);
            }
        });
    }
    
    private void initGUI() {
        menuItems = new JMenuItem[rssFeeds.length];
        
        for(int i = 0; i < rssFeeds.length; i++) {
			menuItems[i] = new JMenuItem(rssFeeds[i][0].toString());
			menuItems[i].addActionListener(this);
			rss.add(menuItems[i]);
		}
        
        btnUpdate.addActionListener(this);
        progressBar.setVisible(false);
        lblDownloaded.setVisible(false);
        //text.setContentType("text/html");
        //text.setEditable(false);
    }
    
    public void actionPerformed(ActionEvent ae) {
        for (int i = 0; i < menuItems.length; i++) {
            if (ae.getSource() == menuItems[i]) {
                createURL(rssFeeds[i][1]);
                System.out.println(menuItems[i].getText());
                if (menuItems[i].getText() == "Börspodden" || menuItems[i].getText() == "Tyngre Radio" || menuItems[i].getText() == "Alex o Sigge" || menuItems[i].getText() == "WTF") {
                    modern = true;
                    acast = false;
                    xml = false;
                    xmlSR = false;
                } else if (menuItems[i].getText() == "Filip o Fredrik" || menuItems[i].getText() == "Allt du velat veta" || menuItems[i].getText() == "Spår Podcast" || menuItems[i].getText() == "Fördomspodden") {
                    acast = true;
                    modern = false;
                    xml = false;
                    xmlSR = false;
                } else if (menuItems[i].getText() == "Historiepodden" || menuItems[i].getText() == "Gry o Anders" || menuItems[i].getText() == "Businesspodden") {
                    xml = true;
                    xmlSR = false;
                } else if (menuItems[i].getText() == "P3 Dokumentär" || menuItems[i].getText() == "Spanarna" || menuItems[i].getText() == "P3 Spel") {
                    xmlSR = true;
                }
                else {
                    acast = false;
                    modern = false;
                    xml = false;
                    xmlSR = false;
                }
                
            }
            
        }
        setClicked(false);
        System.out.println(xml);
        if (xml || xmlSR) {
           xmlParser = new XMLParser(url);
        } else {
            createParser();        
        }
        play.clearList();
        if (xml || xmlSR) {
            updateXML();
        } else {
          update(); 
        }
        
    }
    
    
    
    private void createURL(String url) {
		try {
			this.url = new URL(url);
		} catch (MalformedURLException fel) {
			//text.setText("<b>Kunde inte skapa URL:</b>" + fel.toString());
		}
    }
    
    private void createParser() {
        parser = null;
        
        
                
                URLConnection uc;
        try {
            uc = url.openConnection();
            String contentType = uc.getContentType();
            charset = contentType.substring(contentType.lastIndexOf("=") + 1);
            System.out.println(charset);            
        } catch (IOException ex) {
            Logger.getLogger(SimpleRSS.class.getName()).log(Level.SEVERE, null, ex);
        }
        

        try {
            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream(), charset));
            StringBuffer sb = new StringBuffer();
            String s;
            
            while ((s = in.readLine()) != null) {
                sb.append(s);
            }
            
            in.close();
            
            parser = new SimpleRSSParser(sb.toString());
            
        } catch (IOException ex) {
            Logger.getLogger(SimpleRSS.class.getName()).log(Level.SEVERE, null, ex);
        }
        
                
    }
    
    public void setClicked(boolean curr) {
        imgClicked = curr;    
    }
    
    public boolean getClicked() {
        return imgClicked;
    }
    
    private void update() {
        if (parser == null) return;
        
        setTitle(parser.getTitle());
        //textOutContent.setText(parser.getDescription());
        Image testIMG;
        try {
            testIMG = parser.getImage();
            Image resized = testIMG.getScaledInstance(150, 150,0);
        
            imagelbl.setIcon(new ImageIcon(resized));
            imagelbl.addMouseListener(new MouseAdapter() 
            {
                @Override
                public void mousePressed(MouseEvent e) 
                { 
                  if (!jList1.isSelectionEmpty()) {  
                  int index = jList1.getSelectedIndex();
                  
                  ArrayList<Song> currList = play.getSongList();
                  
                  if (index != -1) {
                      String link = currList.get(index).getImage();
                  if (getClicked() == false) {                
                        
                      try {
                          if (!link.isEmpty()) {
                          setImage(link, 400, 400);
                          setClicked(true);
                          }
                      } catch (IOException ex) {
                          Logger.getLogger(SimpleRSS.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        
                    } else {
                      try {
                          if (!link.isEmpty()) {
                          setImage(link, 150, 150);
                          setClicked(false);
                          }
                      } catch (IOException ex) {
                          Logger.getLogger(SimpleRSS.class.getName()).log(Level.SEVERE, null, ex);
                      }
                    }
                  }
                }
            }
        });
        } catch (IOException ex) {
            Logger.getLogger(SimpleRSS.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
        
        //text.setText(parser.getNews());
        //text.setText(parser.getSound());
        String sounds;
        if (modern) {
            sounds = parser.getSoundOther();
        } else if (acast) {
            sounds = parser.getSoundAcast();
        }       
        else {
            sounds = parser.getSound();
        }
        
        String information = parser.getDescription();
        
        
        String delim = "<br>";
        String[] indSongs = sounds.split(delim);
        String[] indDesc =  information.split(delim);
        
        for (int i = 0; i < indSongs.length; i++) {
            System.out.println(i + indSongs[i]);
        }
        
        String titles = parser.getNews();
        
        String[] indTitles = titles.split(delim);
        
        ArrayList<Song> podList = new ArrayList<Song>();
        
        for (int i = 0; i < indTitles.length; i++) {
            podList.add(new Song(indTitles[i]));
        }
        
        String[] stringArray = new String[podList.size()];
        
        for (int x = 0;x < indSongs.length; x++) {
            podList.get(x).setMP3(indSongs[x]);
            
        }
        
        for (int p = 0; p < podList.size(); p++) {
            stringArray[p] = podList.get(p).getTitle();
        }
        
        for (int z = 0;z < indDesc.length; z++) {
            podList.get(z).setDescription(indDesc[z]);
            
        }
        System.out.println("Desc count :" + indDesc.length);
        System.out.println("Title count:" + indTitles.length);
        ArrayList<String> imgList;
        try {
            if (acast) {
                imgList = parser.getEpisodeImageAcast();
            } else {
                imgList = parser.getEpisodeImage();  
            }
            
            for (int i = 0; i < imgList.size(); i++) {
                podList.get(i).setImage(imgList.get(i));
            }
            
            
        } catch (IOException ex) {
            Logger.getLogger(SimpleRSS.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
        jList1.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = stringArray;
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        
        //listOut.setModel(indSongs);
        for(Song w:podList) {
            play.addSong(w);            
        }
        
        play.checkDownloaded();
        
        textOutContent.setContentType("text/html");
	textOutContent.setEditable(false);
        //jScrollPane1.setViewportView(jList1);
        
        
        
        
        SimpleDateFormat df = new SimpleDateFormat("HH:mm:ss");
        
    }
    
    public void updateXML() {
        try {
            if (xml) {
                xmlParser.parseXML();
            } else if (xmlSR) {
                xmlParser.parseXMLSR();
            }
            ArrayList<Song> podList = new ArrayList<Song>();
            
            ArrayList<String> titleList = new ArrayList<String>();
            titleList = xmlParser.getTitleArray();
            ArrayList<String> descList = new ArrayList<String>();
            descList = xmlParser.getDescArray();
            
            ArrayList<String> indSongs = new ArrayList<String>();
            
            indSongs = xmlParser.getMP3Array();
            ArrayList<String> indImages = xmlParser.getimgArray();
            
        
            for (int i = 0; i < titleList.size(); i++) {
                podList.add(new Song(titleList.get(i)));
            }
           
            String[] stringArray = new String[podList.size()];
            
            for (int z = 0;z < descList.size(); z++) {
                podList.get(z).setDescription(descList.get(z));            
            }
                       
             
            for (int y = 0; y < indSongs.size(); y++) {
                podList.get(y).setMP3(indSongs.get(y));
            }
             
            
            
            for (int index = 0; index < indImages.size(); index++) {
                podList.get(index).setImage(indImages.get(index));
            }
            
            
            
            for (int v = 0; v < stringArray.length; v++) {
                stringArray[v] = podList.get(v).getTitle();
            }
            
            jList1.setModel(new javax.swing.AbstractListModel<String>() {
                  String[] strings = stringArray;
                  public int getSize() { return strings.length; }
                  public String getElementAt(int i) { return strings[i]; }
            });
            
            for(Song w:podList) {
                play.addSong(w);            
            }
            
            setTitle(xmlParser.getTitle());
            
            play.checkDownloaded();
            textOutContent.setContentType("text/html");
            textOutContent.setEditable(false);
            
            textOutContent.setText(xmlParser.getWelcomeText());
            
            String startImg = xmlParser.getStartImage();
            setImage(startImg, 150, 150);
            System.out.println("Desclist : " + descList.size());
            System.out.println("Podlist : " + podList.size());
        } catch (IOException ex) {
            Logger.getLogger(SimpleRSS.class.getName()).log(Level.SEVERE, null, ex);
        }
        
            imagelbl.addMouseListener(new MouseAdapter() 
            {
                @Override
                public void mousePressed(MouseEvent e) 
                { 
                  if (!jList1.isSelectionEmpty()) {  
                  int index = jList1.getSelectedIndex();
                  
                  ArrayList<Song> currList = play.getSongList();
                  
                  if (index != -1) {
                      String link = currList.get(index).getImage();
                  if (!getClicked()) {
                  
                        
                      try {
                          if (!link.isEmpty()) {
                          setImage(link, 400, 400);
                          setClicked(true);
                          }
                      } catch (IOException ex) {
                          Logger.getLogger(SimpleRSS.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        
                    } else {
                      try {
                          if (!link.isEmpty()) {
                          setImage(link, 150, 150);
                          setClicked(false);
                          }
                      } catch (IOException ex) {
                          Logger.getLogger(SimpleRSS.class.getName()).log(Level.SEVERE, null, ex);
                      }
                    }
                  }
                }
            }
        });
       
    }
    
    public void setImage(String link, int imgW,int imgH) throws IOException {
        Image icon = null;
        
        URL imageUrl;
        try {
            imageUrl = new URL(link);
            icon = ImageIO.read(imageUrl);
            
            Image resized = icon.getScaledInstance(imgW, imgH,0);
        
            imagelbl.setIcon(new ImageIcon(resized));
            
        } catch (MalformedURLException ex ) {
            Logger.getLogger(SimpleRSS.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
        
    }
    
    public void download(int index) throws MalformedURLException, IOException {
        ArrayList<Song> currList = play.getSongList();
        if (play.isPaused()) {
            play.Resume();
            lblPlaying.setText("Now Playing : " + currList.get(playindex).getTitle());
            return;
        }
        if (play.checkDownloads(index)) {
            play.playTest(index);
            playindex = index;
            lblPlaying.setText("Now Playing : " + currList.get(playindex).getTitle());
        }
        
    
        
    if (play.checkLink(index) && !play.checkDownloads(index)) {    
       /* URLConnection conn = new URL(songList.get(index).getMP3()).openConnection();
        InputStream is = conn.getInputStream();

        OutputStream outstream = new FileOutputStream(new File(songList.get(index).getTitle() + ".mp3"));
        byte[] buffer = new byte[4096];
        int len;
        while ((len = is.read(buffer)) > 0) {
            outstream.write(buffer, 0, len);
            downloading = true;
        }
        outstream.close();
        downloading = false;
        */
       ArrayList<Song> songList = play.getSongList();
       
       String file = songList.get(index).getMP3();
       String title = songList.get(index).getTitle();
       
       Worker worker = new Worker(file,title);
       
       worker.addPropertyChangeListener(new PropertyChangeListener() {
           @Override
           public void propertyChange(PropertyChangeEvent evt) {
               if ("progress".equals(evt.getPropertyName())) {
                   int progress = ((Integer) evt.getNewValue());
                   progressBar.setVisible(true);
                   progressBar.setValue(progress);
                   btnPlay.setText("Downloading..");
                   System.out.println(progress);
               } else if (evt.getNewValue() == SwingWorker.StateValue.DONE) {
                   try {
                       worker.get();                       
                       play.playTest(index);
                       playindex = index;
                       btnPlay.setText("Playing");
                       lblPlaying.setText("Now Playing : " + currList.get(playindex).getTitle());
                       btnPlay.setEnabled(false);
                       progressBar.setValue(0);
                   } catch (InterruptedException ex) {
                       Logger.getLogger(Player.class.getName()).log(Level.SEVERE, null, ex);
                   } catch (ExecutionException ex) {
                       Logger.getLogger(Player.class.getName()).log(Level.SEVERE, null, ex);
                   } catch (IOException ex) {
                       Logger.getLogger(Player.class.getName()).log(Level.SEVERE, null, ex);
                   }
                   
               }
           }
       });
       worker.execute();
       
       
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnForward;
    private javax.swing.JButton btnPause;
    private javax.swing.JButton btnPlay;
    private javax.swing.JButton btnStop;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JLabel imagelbl;
    private javax.swing.JList<String> jList1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblDownloaded;
    private javax.swing.JLabel lblPlaying;
    private javax.swing.JMenuBar menu;
    public javax.swing.JProgressBar progressBar;
    private javax.swing.JMenu rss;
    private javax.swing.JEditorPane textOutContent;
    // End of variables declaration//GEN-END:variables

    
}
